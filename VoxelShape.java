Stream.of(
Block.box(5, 0, 2, 14, 1, 14),
Block.box(7, 7, 2, 14, 8, 14),
Block.box(4.296100594190539, 5.54327719506772, 2, 7.296100594190538, 12.54327719506772, 14),
Block.box(5, 1, 13, 14, 7, 14),
Block.box(5, 1, 2, 14, 7, 3),
Block.box(13, 1, 3, 14, 7, 13),
Block.box(2, 0, 2, 5, 7, 14),
Block.box(1.923879532511287, 6.61731656763491, 2, 4.923879532511287, 12.61731656763491, 14),
Block.box(12, 0, 7, 12, 5, 8),
Block.box(12, 0, 7, 12, 5, 8),
Block.box(12, 0, 7, 12, 5, 8),
Block.box(12, 0, 7, 12, 5, 8),
Block.box(12, 0.5, 3.5, 12, 1.5, 8.5),
Block.box(12, 0.5, 3.5, 12, 1.5, 11.5),
Block.box(12, 0.5, 6.5, 12, 1.5, 11.5),
Block.box(12, 0.5, 6.5, 12, 1.5, 11.5),
Block.box(11, 0, 7, 11, 5, 8),
Block.box(11, 0, 7, 11, 5, 8),
Block.box(11, 0, 7, 11, 5, 8),
Block.box(11, 0.5, 3.5, 11, 1.5, 8.5),
Block.box(11, 0.5, 3.5, 11, 1.5, 11.5),
Block.box(11, 0.5, 6.5, 11, 1.5, 11.5),
Block.box(11, 0.5, 6.5, 11, 1.5, 11.5),
Block.box(11, 0, 7, 11, 5, 8),
Block.box(10, 0, 7, 10, 5, 8),
Block.box(10, 0, 7, 10, 5, 8),
Block.box(10, 0, 7, 10, 5, 8),
Block.box(10, 0.5, 3.5, 10, 1.5, 8.5),
Block.box(10, 0.5, 3.5, 10, 1.5, 11.5),
Block.box(10, 0.5, 6.5, 10, 1.5, 11.5),
Block.box(10, 0.5, 6.5, 10, 1.5, 11.5),
Block.box(10, 0, 7, 10, 5, 8),
Block.box(9, 0, 7, 9, 5, 8),
Block.box(9, 0, 7, 9, 5, 8),
Block.box(9, 0, 7, 9, 5, 8),
Block.box(9, 0.5, 3.5, 9, 1.5, 8.5),
Block.box(9, 0.5, 3.5, 9, 1.5, 11.5),
Block.box(9, 0.5, 6.5, 9, 1.5, 11.5),
Block.box(9, 0.5, 6.5, 9, 1.5, 11.5),
Block.box(9, 0, 7, 9, 5, 8),
Block.box(8, 0, 7, 8, 5, 8),
Block.box(8, 0, 7, 8, 5, 8),
Block.box(8, 0, 7, 8, 5, 8),
Block.box(8, 0.5, 3.5, 8, 1.5, 8.5),
Block.box(8, 0.5, 3.5, 8, 1.5, 11.5),
Block.box(8, 0.5, 6.5, 8, 1.5, 11.5),
Block.box(8, 0.5, 6.5, 8, 1.5, 11.5),
Block.box(8, 0, 7, 8, 5, 8)
).reduce((v1, v2) -> VoxelShapes.join(v1, v2, IBooleanFunction.OR)).get();